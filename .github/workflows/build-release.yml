name: Build and Release

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"  # Match tags like 1.0.0, 2.3.1, etc.

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
      - name: Update version in version.py
        run: |
          $tag = "${{ github.ref_name }}"
          # Update VERSION string
          (Get-Content version.py) -replace 'VERSION = "[0-9]+\.[0-9]+\.[0-9]+"', "VERSION = `"$tag`"" | Set-Content version.py
          
          # Update VERSION_INFO tuple
          $versionParts = $tag -split '\.'
          $versionTuple = "($($versionParts[0]), $($versionParts[1]), $($versionParts[2]))"
          (Get-Content version.py) -replace 'VERSION_INFO = \([0-9]+, [0-9]+, [0-9]+\)', "VERSION_INFO = $versionTuple" | Set-Content version.py

      - name: Build application
        run: |
          python build.py --platform windows

      - name: Compress artifacts
        run: |
          cd dist
          Compress-Archive -Path "MIDI-REST-Integration-${{ github.ref_name }}-windows" -DestinationPath "MIDI-REST-Integration-${{ github.ref_name }}-windows.zip"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: dist/MIDI-REST-Integration-${{ github.ref_name }}-windows.zip

  # build-macos:
  #   runs-on: macos-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.10'
  #         cache: 'pip'

  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt
  #         pip install pyinstaller  #     - name: Update version in version.py
  #       run: |
  #         tag="${{ github.ref_name }}"
  #         # Update VERSION string
  #         sed -i '' "s/VERSION = \"[0-9]\+\.[0-9]\+\.[0-9]\+\"/VERSION = \"$tag\"/" version.py
  #         
  #         # Update VERSION_INFO tuple
  #         major=$(echo $tag | cut -d. -f1)
  #         minor=$(echo $tag | cut -d. -f2)
  #         patch=$(echo $tag | cut -d. -f3)
  #         sed -i '' "s/VERSION_INFO = ([0-9]\+, [0-9]\+, [0-9]\+)/VERSION_INFO = ($major, $minor, $patch)/" version.py

  #     - name: Build application
  #       run: |
  #         python build.py --platform macos

  #     - name: Compress artifacts
  #       run: |
  #         cd dist
  #         zip -r "MIDI-REST-Integration-${{ github.ref_name }}-darwin.zip" "MIDI-REST-Integration-${{ github.ref_name }}-darwin"

  #     - name: Upload artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: macos-build
  #         path: dist/MIDI-REST-Integration-${{ github.ref_name }}-darwin.zip

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
          sudo apt-get update
      - name: Update version in version.py
        run: |
          tag="${{ github.ref_name }}"
          # Update VERSION string
          sed -i "s/VERSION = \"[0-9]\+\.[0-9]\+\.[0-9]\+\"/VERSION = \"$tag\"/" version.py
          
          # Update VERSION_INFO tuple
          major=$(echo $tag | cut -d. -f1)
          minor=$(echo $tag | cut -d. -f2)
          patch=$(echo $tag | cut -d. -f3)
          sed -i "s/VERSION_INFO = ([0-9]\+, [0-9]\+, [0-9]\+)/VERSION_INFO = ($major, $minor, $patch)/" version.py

      - name: Build application
        run: |
          python build.py --platform linux

      - name: Compress artifacts
        run: |
          cd dist
          tar -czvf "MIDI-REST-Integration-${{ github.ref_name }}-linux.tar.gz" "MIDI-REST-Integration-${{ github.ref_name }}-linux"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: dist/MIDI-REST-Integration-${{ github.ref_name }}-linux.tar.gz
  create-release:
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List artifacts
        run: ls -R artifacts

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: MIDI REST Integration v${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            artifacts/windows-build/MIDI-REST-Integration-${{ github.ref_name }}-windows.zip
            artifacts/linux-build/MIDI-REST-Integration-${{ github.ref_name }}-linux.tar.gz
          body: |
            # MIDI REST Integration v${{ github.ref_name }}
            
            This release contains binaries for Windows and Linux.
            
            ## Installation
            
            - **Windows**: Download the Windows zip file, extract it, and run the executable.
            - **Linux**: Download the Linux tar.gz file, extract it, and run the executable.
            
            ## Changes in v${{ github.ref_name }}
            
            _Release notes will be added here_
